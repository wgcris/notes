(1) YARN-4434 (可忽略)
(2) YARN-4424
RMAppImpl::getFinalApplicationStatus函数中去掉了readLock的锁定。
因为该readlock的锁是RMAppImpl的，currentAttempt是RMAppImpl生成的RMAppAttemptImpl对象，与该readlock无关。
而且currentAttempt.getFinalApplicationStatus函数中已经进行了加锁操作。
而且stateMachine.getCurrentState方法是线程安全的。

(3) YARN-4365
YARN Node Labels(2.6.0引入的功能)功能是对NodeManager打上标签。同时可以设置队列的标签，使队列必须运行在具有相同标签的计算机上。(注:标签之间不重叠)
ResourceManager中增加了RMNodeLabelsManager类型的服务, RMNodeLabelsManager的store变量用于记录具体内容。
在store(FileSystemNodeLabelsStore)的init函数中，创建了store的根目录，之前没有检查根目录之前是否存在。补丁修改为仅当根目录存在的时候再创建目录。
注： 经过测试，发现正常情况下实际没有多大的影响。safemode并没有阻止RM的启动?????
因为两次hadoop fs -mkdir并没有返回错误(预计代码中没有抛出异常)。

(4) YARN-4354
nodemanager卡住了，持续拒绝请求。
因为可能会出现NPE(空指针异常)，导致线程受损。

(5) YARN-4348


(14)YARN-4209
问题是FENCED没有生效。
原本的设计思维是: RMStateStore进入一次transition操作的时候，如果捕获到异常，就调用notifyStoreOperationFailed方法设置FENCED状态。
而2.7.1实际的情况是外部调用状态机后，内部继续调用了状态机，尽管内部状态机设置为FENCED，但外部状态机仍然设置为ACTIVE
详细说明见附录B

(42) YARN-3798

附录A 资源本地化
ContainerManagerImpl下有ResourceLocalizationService服务，该服务内部有LocalizerTracker用于本地化。
LocalizerTracker::handle处理的请求的本地化事件。public事件(即请求public源)会增加源(专门由一个线程publicLocalizer用于不断处理queue发来的下载请求FSDownload,具体是publicRsrc，即LocalResourcesTracker)，app事件(请求app源)会启动一个新线程用于下载。

其中, publicRsrc是一个LocalResourcesTrackerImpl类的对象，是一个public源的事件处理器。通过代码可以知道LocalResourcesTrackerImpl主要处理public源。

附录B 有限状态机
为了详细说明问题，以2.7.1的代码详细分析一下状态机和YARN-4209失败的原因。
(a) stateMachine组件
RMStateStore有组件stateMachine, 类型为StateMachine<RMStateStoreState,RMStateStoreEventType,RMStateStoreEvent>
	(a.1) stateMachine的构造
		stateMachine的构造的方法如下:
		stateMachine = stateMachineFactory.make(this)
		其中,stateMachineFactory是一个状态机工厂。
		(a.1.1) stateMachineFactory的构造
			stateMachineFactory = new StateMachineFactory<RMStateStore,RMStateStoreState,RMStateStoreEventType,RMStateStoreEvent>(RMStateStoreState.ACTIVE).addTransition(...).addTransition(...)...
		首先构造一个StateMachineFactory对象，设置初始化状态为RMStateStoreState.ACTIVE。然后不断地调用addTransition方法。
		由多个addTransition方法，这里仅仅介绍用到的三个，其他类似不再说明。
			(a.1.1.1) addTransition(STATE preState, STATE postState,EVENTTYPE eventType,SingleArcTransition<OPERAND, EVENT> hook)
				这个方法基于之前的状态机工厂又构造了一个状态机工厂，新状态机不断地增加ApplicableTransition。其实，就是相当于在状态机中transitionsListNode不断增加ApplicableSingleOrMultipleTransition节点。
			(a.1.1.2) addTransition(STATE preState, STATE postState, EVENTTYPE eventType)
				与上面相同，仅仅hook设置为null。
			(a.1.1.3) addTransition(STATE preState, STATE postState, Set<EVENTTYPE> eventTypes)
				不断的调用addTransition上面哪个函数，调用的个数为set的个数。	
	(a.2)	stateMachine的生成
		stateMachine = stateMachineFactory.make(this)
			构造一个InternalStateMachine对象并返回。传入的第一个参数是this(表示这个RMStateStore)，第二个参数是defaultInitialState(已设置为ACTIVE)
				InternalStateMachine构造函数
					构造函数内部首先设置了operand和currrentState。
						maybeMakeStateMachineTable
							makeStateMachineTable
								遍历transitionsListNode(之前的一系列addTransition加入很多节点)，压入栈stack。
								然后依次出栈(不嫌麻烦?),不断地调用apply方法，即ApplicableSingleOrMultipleTransition::apply。
									ApplicableSingleOrMultipleTransition::apply
										根据传入的preState(即addTransition的preState)从stateMachineTable找到对应的map,然后将event和transition一起put到该map(为addTransition传入的event和hook构造的SingleInternalArc)。
		特别说明: 至此stateMachineTable已经被设置号了。stateMachineTable是一个双层的map,他的key为addTransition中的preState,value为子层map。子层map的key为event,value为transition(key和value分别对应于addTransition传入的event和hook)	
		总结: 截止到这里状态机stateMachine构造完成，这里主要生成了状态机组件stateMachineTable的双层map结构。尽管咱是没有继续深入，可以轻松猜测到preState----(event)--->transition的使用流程。即某一个状态下经过某个时间调用后一个钩子程序(transition或hook)。
		(a.3) stateMachine.doTransition
			下面分析状态机处理时间的流程。
			根据前面分析会调用InternalStateMachine.doTransition,从这里开始分析:
			InternalStateMachine.doTransition						
				StateMachineFactory.this.doTransition			//第一个参数是this(表示RMStateStore实例)，第二个参数是currentState(表示当前状态)
					根据传入状态(这里已经他的叫法已经从currentState的改为oldState)从stateMachineTable获取子map，即transitionMap。
					然后在子map中根据event的找到钩子处理类transition(SingleInternalArc类)。
					然后执行transition.doTransition(即SingleInternalArc::doTransition，即SingleInternalArc由addTransition的postState和hook构造)
						调用hook.transition(hook即addTransition传入的第四个参数，例如new StoreAppTransition())
							StoreAppTransition.transition
						返回postState(即addTransition传入的第二个参数)

(b) YARN-4209失败的原因
从RMStateStore.removeRMDelegationToken开始分析
removeRMDelegationToken
	handleStoreEvent				//参数为new RMStateStoreRMDTEvent(rmDTIdentifier, null, RMStateStoreEventType.REMOVE_DELEGATION_TOKEN)
		将当前的状态赋值给oldState
		this.stateMachine.doTransition		//假设之前是ACTIVE状态，传入的时间类型为RMStateStoreEventType.REMOVE_DELEGATION_TOKEN,		
			RemoveRMDTTransition::transition			//具体见前面的分析
				removeRMDelegationTokenState
				若抛出异常，调用notifyStoreOperationFailed，可以知道这个已经讲状态更该为FENCED。
			但是根据前面介绍，这里会返回到SingleInternalArc::doTransition继续执行，会返回postState。由于postState被设置为ACTIVE，所以状态这这阶段由ACTIVE变为FENCED又变为ACTIVE。

(c) 修改的方案
修改的代码较多，但是很类似。
主要讲postState状态改为Set方式传入，把各种transition(譬如StoreAppTransition)的实现的接口从SingleArcTransition改为MultipleArcTransition。MultipleArcTransition会根据transition方法返回值来返回状态(详见代码，比较容易)。因此，不会造成向SingleArcTransition一样返回值状态值始终为postState。


附录B 事件处理器
以"Hadoop技术内幕-Yarn"的3.4.3小节的例子分析(不同的是main函数使用的是init和start，而不是serviceInit和serviceStart)

main
	SimpleMrAppMaster.init
		AbstractService.init													//SimpleMrAppMaster没有实现该方法，父类的父类AbstractService才实现
			SimpleMrAppMaster.serviceInit								//SimpleMrAppMaster覆盖了serviceInit方法
				构造dispatcher对象(AsyncDispatcher类型)
				dispatcher.register
					AsyncDispatcher中有组件eventDispatchers(是一个map,key为eventType,value为EventHandler),根据传入的eventType找EventHandler。如果不存在，使用传入的eventType和handler传入即可。如果已经存在一个handler，就继续添加到里面。(正常只能添加一个handler，如果同一个eventType多次注册，可以使用一个MultiListenerHandler，将多个EventHandler假如其中)。
				SimpleMrAppMaster.addService							//SimpleMrAppMaster未实现addService，调用CompositeService.addService
					CompositeService.addService
						serviceList.add												//将dispatcher对象添加到serviceList(List对象)中，其实也是继承于AbstractService
						super.serviceInit											//CompositeService
							CompositeService.serviceInit				
								getServices												//获取serviceList列表的项目service，这里目前仅有一个dispatcher对象
								然会一次调用这些的init方法					//与之前的分析类似，调用AbstractService.init方法，然后有调用AsyncDispatcher的方法
								super.serviceInit
									AbstractService.serviceInit			//处理conf				
			notifyListeners														//这里咱是没有注册listener,暂时不看
	SimpleMrAppMaster.start
		AbstractService.start
			CompositeService::serviceStart
				遍历serviceList中的所有Service(目前只有dispatcher)，依次执行start函数。
					会通过调用AbstractService的start调用到AsyncDispatcher的serviceStart
					AsyncDispatcher.serviceStart
						启动一个线程eventHandlingThread。该线程的run函数是一个循环依次从eventQueue的take方法取出事件event，然后dispatch。dispatch根据事件event找到对应的EventHandler(在eventDispatchers中找)，找到之后调用EventHandler的handle方法处理。
			notifyListeners														//这里咱是没有注册listener,暂时不看								
	SimpleMrAppMaster.getDispatcher().getEventHandler().handle
		getEventHandler返回一个GenericEventHandler对象，handle方法是将一个event放入(put)到eventQueue中。
注: 这里处理队列的时候，省略说明了drained和阻塞相关内容。




以8030端口分析RPC，

1 服务端
1.1 使用流程
ApplicationMasterService.java
以ApplicationMasterService类使用RPC为例子进行分析，说明启动。
rpc=YarnRPC.create
	根据配置选择RPC的类，默认为HadoopYarnProtoRPC
	实例化该类
rpc.getServer
	HadoopYarnProtoRPC.getServer
		RpcFactoryProvider.getServerFactory.getServer
			首先使用默认的工厂类构造工厂RpcServerFactoryPBImpl
			RpcServerFactoryPBImpl.getServer
				RpcServerFactoryPBImpl.createServer
					构造Server对象			
server.start
	启动responder,listener,handlers

1.2 server服务组件分析
分析listener,handlers,responder三个服务组件
1.2.1 Listener
(1) 构造方法
	构造acceptChannel,配置为非阻塞模式，绑定主机端口				// 用于接受连接请求。配置为非阻塞模式，accept() 方法会立刻返回，如果还没有新进来的连接,返回的将是null。 
	构造selector																	
	构造reader																				// 内部构造了pendingConnections和readSelector
	启动reader
		reader.run
			doRunLoop
				处理pendingConnections，将其注册到readSelector
				readSelector.select
				然后从readSelector中读取得到的消息，这里实质上是accept之后client端发来的消息
				遍历消息，执行doRead
					doRead
						设置上次同时时间，主要为了关闭空闲连接
						c.readAndProcess
							...																		//解析
							processOneRpc
								获取Protobuf的格式信息
								processRpcRequest
									构造rpcRequest，Call
									callQueue.put											// 写入callqueue														
	acceptChannel.register														// 注册。将acceptChannel与selector联系在一起。使用select必须为非阻塞模式。

(2) run
	配置了线程变量SERVER
	connectionManager.startIdleScan
		scheduleIdleScanTask			// 循环执行下面代码
			closeIdle								// 关闭处于长期处于idle状态的连接
	进入循环
		getSelector().select			// 非阻塞模式，使用select接受socket
		遍历发来的消息，如果发来的消息有效执行doAccept
			doAccept								// 用于处理客户端的连接请求。
				获取连接channel，并向connectionManager注册
				reader.addConnection		//供前面分析的reader使用，执行具体数据
					将连接写入pendingConnections
					readSelector.wakeup

1.2.2 handlers线程
(1) run
	配置了线程变量SERVER
	配置字节输出流buf
	进入循环
		callQueue.take													//从callQueue拿Call对象
		记录CurCall，为线程级别变量
		call
			getRpcInvoker(rpcKind).call				//执行具体的调用
			




2 客户端
2.1 使用流程
AMRMClientImpl.java
以ApplicationMasterProtocol的allocate方法访问为例子
rmClient=ClientRMProxy.createRMProxy
	RMProxy.createRMProxy
		createRetryPolicy
			配置连接等待时间，重试间隔时间等一些规则
		createRMFailoverProxyProvider
			获得provider对象，默认使用ConfiguredRMFailoverProxyProvider
			ConfiguredRMFailoverProxyProvider.init			//配置相关参数
		RetryProxy.create			
			构造Proxy对象，具体的实现类为,交由RetryInvocationHandler处理
			RetryInvocationHandler						//具体见Java的动态代理机制
			
rmClient.allocate
	
	
	
	
	
3. 一次RPC问题的分析
AM中调用下面方法kill container
ContainerLauncherImpl.kill
	ContainerManagementProtocolPBClientImpl.stopContainers
		ContainerManagementProtocolProxyData.proxy.stopContainers						//这个proxy来自于NMProxy.createNMProxy，构造的时候是根据总延时时间/休眠时间来计算次数的
		
		
RetryInvocationHandler.invoke
	invokeMethod
		rpc.getProxy			//根据传入的内容执行如下方法
			由于传入的接口是ContainerManagementProtocol，因此具体执行的对象为ContainerManagementProtocolPBClientImpl
				ContainerManagementProtocolPBClientImpl.stopContainers							//根据构造函数，可以知道这个就是调用的RPC接口对应的类
					proxy.stopContainers				// Invoker
						会执行ProtobufRpcEngine.Invoker.invoke
							client.call
								getConnection
									setupIOstreams
										setupConnection
											根据次数判断是否重试，具体如下。		//ipc.client.connect.max.retries,默认10次   ipc.client.connect.retry.interval,默认1000ms
	根据次数判断是否得到了超过异常次数					// yarn.client.nodemanager-connect.max-wait-ms 默认3分钟  yarn.client.nodemanager-connect.retry-interval-ms 默认10秒
																			 // 注: 深入代码您会发现实际传入的参数是次数，因此yarn.client.nodemanager-connect.max-wait-ms并没有生效，生效的是yarn.client.nodemanager-connect.max-wait-ms/yarn.client.nodemanager-connect.retry-interval-ms
																			 // 所以这里实际等待的时间包括了setupConnection等待时间。因此每次等待cleanup container超时时间为6min10s就可以解释了
																			 // 时间为  (3*60/10)*(10+10)+10=190s,恰好为6分10s。为什么最后加一个10?是因为最后一次达到了失败重试次数之后，就不再需要延时了，直接退出即可。

			
ProtobufRpcEngine.Invoker.invoke
	...
	client.call
		getConnection
			setupIOstreams
				setupConnection
					handleConnectionFailure				//连接失败会重试10次，每次延时1s。
																				//具体根据connectionRetryPolicy设置，来自于getConnectionId中构造
																				//ipc.client.connect.max.retries,默认10次
																				//ipc.client.connect.retry.interval,默认1000ms
																				
	...
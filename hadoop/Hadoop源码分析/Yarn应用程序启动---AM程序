本文主要是AM程序的结束，试图从AM角度分析AM怎么控制一个应用程序的其他任务。
1. 程序的基本流程
		//1. 启动与RM通信的组件
		AMRMClientAsync.CallbackHandler amrmCallbackHandler = new RMCallbackHandler();
		rmClient = AMRMClientAsync.createAMRMClientAsync(1000,
				amrmCallbackHandler);				//1000为心跳的间隔
		rmClient.init(conf);
		rmClient.start();

		//2. 启动与NM通信的组件
		NMClientAsync.CallbackHandler amnmCallbackHandler = new NMCallbackHandler();
		nmClient = NMClientAsync.createNMClientAsync(amnmCallbackHandler);
		nmClient.init(conf);
		nmClient.start();
		
		//3. 向RM注册程序
		//3.1 注册
		RegisterApplicationMasterResponse response = rmClient.registerApplicationMaster(
				rmHost, rmPort, appMasterTrackingUrl);
		//3.2 查看RM分配的资源
		int maxMem = response.getMaximumResourceCapability().getMemory();
		log.info("Max mem capabililty of resources in this cluster " + maxMem);
		
		//4. 向RM申请Container, 为了简单这里仅仅启动一个Container
		//4.1 构造申请Container的请求,设置优先级和资源分配量
		Priority pri = Records.newRecord(Priority.class);
		pri.setPriority(1);		//请求优先级设置为1
		Resource cap = Records.newRecord(Resource.class);
		cap.setMemory(2048);		//申请分配内存给执行任务的container
		cap.setVirtualCores(2);	//申请分配使用2个cpu核心
		ContainerRequest request = new ContainerRequest(cap, null, null, pri);
		//4.2 向RM发送获取Container的请求		
		rmClient.addContainerRequest(request);

		log.info("end??");
		//这里如果不增加rmClient.unregisterApplicationMaster,AM程序是不会完成的(当然没有while死循环的条件下)。
		while(true){}
		//最好的方式是，while循环获取退出条件，后面调用rmClient.unregisterApplicationMaster

2. 程序分析
2.1 启动与RM通信的组件
RMCallbackHandler是AMRMClientAsync.CallbackHandler的子类，重载的onContainersAllocated方法会启动一个线程，用户发送启动Container的命令。
rmClient是一个AMRMClientAsyncImpl对象，并设置AMRMClientAsyncImpl.handler为RMCallbackHandler
AMRMClientAsyncImpl.serviceInit			

AMRMClientAsyncImpl.serviceStart
	开启了CallbackHandlerThread线程，很显然用于处理事件。

2.2 启动与NM通信的组件
NMCallbackHandler是NMClientAsync.CallbackHandler的子类，这里重载方法暂时没有完成任何工作。
nmClient是一个NMClientAsyncImpl对象，并设置了NMClientAsync.callbackHandler为NMCallbackHandler
NMClientAsyncImpl.serviceInit				
NMClientAsyncImpl.serviceStart
	启动eventDispatcherThread线程，主要从event中取出事件，交给getContainerEventProcessor处理

2.3 向RM注册程序
rmClient.registerApplicationMaster
	...
		这里启动了heartbeatThread线程， 不会断的远程调用allocate
	...

2.4 向RM发送请求
rmClient.addContainerRequest

3. 向RM发送请求的展开分析
AMRMClientAsyncImpl.addContainerRequest
	AMRMClientImpl.addContainerRequest							// 参数是AM程序传入的ContainerRequest对象
		获取传入的机架，并使用Set清除了重复的机架名称，得到dedupedRacks
		resolveRacks				//猜测是请求中节点相关的机架名称列表inferredRacks，具体暂不分析
		inferredRacks.removeAll(dedupedRacks)			//?????
		checkLocalityRelaxationConflict
			分别检查某个位置上的某个优先级请求是否与提交的relaxLocality一致，不一致就错误。		//hadoop的严格要求
			注:一共调用三次，分别检查ANY_LIST，dedupedRacks，inferredRacks的请求是否一致
		checkNodeLabelExpression			//及参会NodeLabel是否可用
		然后对传入的nodes进行重复清理得到dedupedNodes
		然后对每一个dedupedNodes遍历，执行addResourceRequest
			addResourceRequest
				这里会把node请求加入到remoteRequests中第?????层value中。
				如果设置了relaxLocality，会把req加入到containerRequests中。
				如果资源名称为*,就为remoteRequest设置NodeLabel
				最后把请求放到ask中
				注意:remoteRequestsTable
		然后分别对dedupedRacks和inferredRacks执行addResourceRequest操作。					?????到底加入哪个请求
		对Off-switch执行类似的处理



